{"cells":[{"metadata":{"trusted":false},"cell_type":"code","source":"import huggingface\nfrom transformers import Pipeline\nfrom transformers import pipeline\nimport streamlit as st\nfrom typing import Dict","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def getQA_pipeline() -> Pipeline:\n    qa = pipeline('question-answering')\n    return qa","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def answerQuestion(pipeline: Pipeline, question: str, paragraph: str) -> Dict:\n    input = {\n        'question' : question,\n        'context' : paragraph\n    }\n    return pipeline(input)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def formatText(paragraph: str, startIdx: int, endIdx: int) -> str:\n    return paragraph[:startIdx] + '**' + paragraph[startIdx:endIdx] \\\n                + '**' + paragraph[endIdx:]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"if __name__ == '__main__':\n    inputFile = open('demoContextFile.txt', 'r', encoding='latin-1')\n    paragraphSlot = st.empty()\n    additionalContext = st.text_input('additional context', '')\n    question = st.text_input('question', '')\n    baseContext = inputFile.read()\n    inputFile.close()\n    \n    fullContext = baseContext + ' ' + additionalContext\n    paragraphSlot.markdown(fullContext)\n    \n    # executes question against paragraph\n    if question != '':\n        pipeline = getQA_pipeline()\n        \n        answer = answerQuestion(pipeline, question, fullContext)\n        \n        startIdx = answer['start']\n        endIdx = answer['end']\n        paragraphSlot.markdown(formatText(fullContext, startIdx, endIdx))\n        st.write(answer)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.4","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":2}